// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"database/sql"
	"github.com/go-playground/validator/v10"
	"github.com/gorilla/mux"
	"github.com/linggaaskaedo/go-playground-wire-v2/lib/cache"
	"github.com/linggaaskaedo/go-playground-wire-v2/lib/config"
	"github.com/linggaaskaedo/go-playground-wire-v2/lib/database"
	"github.com/linggaaskaedo/go-playground-wire-v2/lib/middleware"
	"github.com/linggaaskaedo/go-playground-wire-v2/lib/router"
	"github.com/linggaaskaedo/go-playground-wire-v2/lib/server"
	validator2 "github.com/linggaaskaedo/go-playground-wire-v2/lib/validator"
	"github.com/linggaaskaedo/go-playground-wire-v2/src/business/domain"
	"github.com/linggaaskaedo/go-playground-wire-v2/src/business/usecase"
	"github.com/linggaaskaedo/go-playground-wire-v2/src/common"
	"github.com/redis/go-redis/v9"
	"net/http"
)

// Injectors from wire.go:

func InitializeConfig() (common.Configuration, error) {
	configuration, err := config.InitConfig()
	if err != nil {
		return common.Configuration{}, err
	}
	return configuration, nil
}

func InitializeMySQL(ctx2 context.Context) (*sql.DB, error) {
	db, err := database.InitMySQL(ctx2)
	if err != nil {
		return nil, err
	}
	return db, nil
}

func InitializeRedis(ctx2 context.Context) (*redis.Client, error) {
	client, err := cache.InitRedis(ctx2)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InitializeValidator() (*validator.Validate, error) {
	validate := validator2.InitValidator()
	return validate, nil
}

func InitializeBusiness(domOpts domain.Options, ucOpts usecase.Options, mysql *sql.DB, redis2 *redis.Client) *usecase.Usecase {
	domainDomain := domain.Init(domOpts, mysql, redis2)
	usecaseUsecase := usecase.Init(ucOpts, domainDomain)
	return usecaseUsecase
}

func InitializeRouter() *mux.Router {
	muxRouter := router.InitRouter()
	return muxRouter
}

func InitializeServer(ctx2 context.Context, db *sql.DB, cache2 *redis.Client, validator3 *validator.Validate, router2 *mux.Router) (*http.Server, error) {
	middlewareMiddleware := middleware.InitMiddleware(router2)
	serverOptions := &server.ServerOptions{
		Middleware: middlewareMiddleware,
	}
	httpServer := server.InitServer(ctx2, serverOptions)
	return httpServer, nil
}
